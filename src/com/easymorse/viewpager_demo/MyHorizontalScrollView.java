package com.easymorse.viewpager_demo;import java.util.ArrayList;import java.util.List;import android.app.Activity;import android.content.Context;import android.support.v4.view.ViewPager;import android.util.AttributeSet;import android.util.DisplayMetrics;import android.util.Log;import android.view.View;import android.view.ViewTreeObserver;import android.widget.HorizontalScrollView;import android.widget.LinearLayout;import android.widget.TextView;public class MyHorizontalScrollView extends HorizontalScrollView{	private int displayWidth;		private ViewPager viewPager;		private int width;		private int scrollViewWidth;		private int left;		private int right;		//选择某个标签时，viewpager切换是否有动画	private boolean isAnim;		private List<String> titleList = new ArrayList<String>();		private Activity mContext;		private LinearLayout horizontalLayout;		//当前在第几屏	private int currentIndex;		//之前在第几屏	private int oldIndex;		public MyHorizontalScrollView(Context context, AttributeSet attrs) {		super(context, attrs);		mContext = (Activity) context;		initView(mContext);	}	public MyHorizontalScrollView(Context context) {		super(context);		mContext = (Activity) context;		initView(mContext);	}		private void initView(Activity context){		DisplayMetrics metric = new DisplayMetrics();		context.getWindowManager().getDefaultDisplay().getMetrics(metric);		displayWidth = metric.widthPixels;		getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {						@Override			public void onGlobalLayout() {				if(horizontalLayout == null){					horizontalLayout = (LinearLayout) getChildAt(0);				}				if(horizontalLayout.getChildCount()>0){					width = horizontalLayout.getChildAt(0).getWidth();					scrollViewWidth = getWidth();					Log.e("tag", "width = " + width);					getViewTreeObserver().removeGlobalOnLayoutListener(this);				}			}		});	}		public void setViewPager(ViewPager viewPager){		this.viewPager = viewPager;		viewPager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {			@Override			public void onPageSelected(int arg0) {				Log.e("tag", "left = "+left );				//左中点				int leftCenterX = arg0 * width + (width/2) - left;				Log.e("tag", "leftCenterX = "+leftCenterX );				int rightCenterX = right - (arg0 * width + (width/2));				Log.e("tag", "rightCenterX = "+rightCenterX );				int center = displayWidth / 2;				Log.e("tag", "center = "+center );				int scollX = leftCenterX - center;				Log.e("tag", "scollX = "+scollX );				currentIndex = arg0;				setLine();				scrollBy(scollX, 0);							}			@Override			public void onPageScrolled(int arg0, float arg1, int arg2) {			}			@Override			public void onPageScrollStateChanged(int arg0) {			}		});	}		@Override	protected void onScrollChanged(int l, int t, int oldl, int oldt) {		super.onScrollChanged(l, t, oldl, oldt);		left = l;		right = left + scrollViewWidth;	}		public boolean isAnim() {		return isAnim;	}	public void setAnim(boolean isAnim) {		this.isAnim = isAnim;	}	public void setAllTitle(List<String> list){		this.titleList.clear();		this.titleList.addAll(list);		if(horizontalLayout == null){			horizontalLayout = (LinearLayout) getChildAt(0);		}		horizontalLayout.removeAllViews();		for(int i=0;i<list.size();i++){			View view = mContext.getLayoutInflater().inflate(R.layout.title_item, null);			TextView textView = (TextView) view.findViewById(R.id.item_text);			view.setTag(i);			textView.setText(list.get(i));			view.setOnClickListener(new View.OnClickListener() {								@Override				public void onClick(View v) {					int item =  (Integer) v.getTag();					viewPager.setCurrentItem(item, true);				}			});			horizontalLayout.addView(view);		}		currentIndex = 0;		setLine();	}		private void setLine(){		horizontalLayout.getChildAt(oldIndex).findViewById(R.id.line).setVisibility(View.GONE);		horizontalLayout.getChildAt(currentIndex).findViewById(R.id.line).setVisibility(View.VISIBLE);		oldIndex = currentIndex;	}	}